apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias '111111'
            keyPassword '111111'
            storeFile file('/Users/mama/app_store.jks')
            storePassword '111111'
        }
    }
    compileSdkVersion 23
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.example.hook.dex.target"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


        externalNativeBuild {

            // For ndk-build, instead use ndkBuild {}
            cmake {
                abiFilters 'armeabi-v7a'
                // Passes optional arguments to CMake.
//                arguments "-DCMAKE_VERBOSE_MAKEFILE=TRUE"

                // Sets optional flags fo
                // r the C compiler.
//                cFlags "-D_EXAMPLE_C_FLAG1", "-D_EXAMPLE_C_FLAG2"

                // Sets a flag to enable format macro constants for the C++ compiler.
                cppFlags "-std=c++11"
            }
        }
    }
    buildTypes {
        debug{
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
    testCompile 'junit:junit:4.12'
    compile project(path: ':inject_dex')
    compile project(path: ':inject_zygote')
    compile project(path: ':read_memory')
}


task build_native(type: Exec) {
    println "start build native so..."
    String buildPath = buildDir;
    String workspace = buildPath.substring(0, buildPath.lastIndexOf(File.separator))
    String os = System.getProperty("os.name");
    String batPath = ""
    if (os.toLowerCase().startsWith("win")) {
        batPath = workspace + File.separator + "self_build.bat"
        commandLine batPath, workspace
    } else {
        batPath = workspace + File.separator + "self_build.sah"
        commandLine "sh", batPath, workspace
    }
    println "execute: " + batPath
}

afterEvaluate {
    android.applicationVariants.each { variant ->
        String BUILD_TYPE = "${variant.buildType.name}"
        if (BUILD_TYPE.toLowerCase() != "debug") {
            return;
        }
        def shrinkTask = tasks.findByName("mergeDebugJniLibFolders")
        build_native.dependsOn shrinkTask.taskDependencies.getDependencies(shrinkTask)
        shrinkTask.dependsOn build_native
    }
}